#! /bin/bash

git fetch --tags
# Get the current branch name from the second argument
BRANCH_NAME=$2
echo "The branch name is: ${BRANCH_NAME}"


# Checkout the branch
git checkout ${BRANCH_NAME}

# Check if the latest commit is empty
if ! git diff --quiet HEAD~1 HEAD; then
    echo "The latest commit is not empty. Exiting."
    exit 1
fi

# Get the current version from the latest tag. 
VERSION_TEXT=`git describe --tags`

MAJOR=0
MINOR=0
PATCH=0

# Get the version number from the version text. 
if [[ $VERSION_TEXT =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
    MAJOR=${BASH_REMATCH[1]}
    MINOR=${BASH_REMATCH[2]}
    PATCH=${BASH_REMATCH[3]}
fi

# Get the latest commit message
LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)

# Check if the latest commit message contains the phrase "Update Version"
if [[ $LATEST_COMMIT_MESSAGE == *"Update Version"* ]]; then
    echo "Start Version Update"
else
    echo "Do not update the version"
    exit 1
fi

# Get the first argument that is given to this script. 
# It should describe the type of version update.
ARGUMENT=$1
echo "The first argument is: ${ARGUMENT}"

# Check the type of version update
if [[ $ARGUMENT == *"MAJOR"* ]]; then
    MAJOR=$((MAJOR + 1))
    MINOR=0
    PATCH=0
    echo "This is a major version update."
elif [[ $ARGUMENT == *"MINOR"* ]]; then
    MINOR=$((MINOR + 1))
    PATCH=0
    echo "This is a minor version update."
elif [[ $ARGUMENT == *"PATCH"* ]]; then
    PATCH=$((PATCH + 1))
    echo "This is a patch version update."
else
    echo "No version update info given."
    exit 1
fi

# Set the new version text
NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
echo "NEW_VERSION: ${NEW_VERSION}"
NEW_VERSION_TEXT="v${NEW_VERSION}"

echo "The new version is set to ${NEW_VERSION_TEXT}"

# Update the major version in version.txt
sed -i "s/const int major_version = [0-9]\+/const int major_version = ${MAJOR}/" version.txt

# Update the minor version in version.txt
sed -i "s/const int minor_version = [0-9]\+/const int minor_version = ${MINOR}/" version.txt

# Update the PATCH version in version.txt
sed -i "s/const int patch = [0-9]\+/const int patch = ${PATCH}/" version.txt

# Update the version in version.txt
sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${NEW_VERSION}/" version.txt

# Update the date-released in version.txt
CURRENT_DATE=$(date +%F)
sed -i "s/date-released: \".*\"/date-released: \"${CURRENT_DATE}\"/" version.txt

GIT_COMMIT_MESSAGE="Updated the version to ${NEW_VERSION}"

# Add the changes to a new commit
git config user.name github-actions
git config user.email github-actions@github.com

echo "git add version.txt"
git add version.txt
echo "git commit -m $GIT_COMMIT_MESSAGE"
git commit -m "$GIT_COMMIT_MESSAGE"

echo "git tag"
# Tag the new version in git
if git tag -a $NEW_VERSION_TEXT -m "Version $NEW_VERSION_TEXT"; then
    echo "Tag created successfully"
    git push origin ${BRANCH_NAME} --tags
else
    echo "Failed to create tag"
    exit 1
fi


#echo "Updated version to $NEW_VERSION_TEXT"